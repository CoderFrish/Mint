From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kercute <A3167717663@hotmail.com>
Date: Wed, 31 Jul 2024 13:13:07 +0800
Subject: [PATCH] KioCG Chunk API and display of chunkhot in tpsbar


diff --git a/src/main/java/ca/spottedleaf/moonrise/common/util/ChunkSystem.java b/src/main/java/ca/spottedleaf/moonrise/common/util/ChunkSystem.java
index 83b052dbf6d21775664b286518f3cef1d86e87d1..c6c5292e96ef610b6edbb9341fda97d4cdec30e3 100644
--- a/src/main/java/ca/spottedleaf/moonrise/common/util/ChunkSystem.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/util/ChunkSystem.java
@@ -113,6 +113,7 @@ public final class ChunkSystem {
     }
 
     public static void onChunkNotTicking(final LevelChunk chunk, final ChunkHolder holder) {
+        chunk.getChunkHot().clear(); // KioCG
         chunk.getLevel().getCurrentWorldData().removeTickingChunk(chunk.moonrise$getChunkAndHolder()); // Folia - region threading
     }
 
diff --git a/src/main/java/com/kiocg/ChunkHot.java b/src/main/java/com/kiocg/ChunkHot.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b0f79dde91d0d61302a39536b5810c42fd317bc
--- /dev/null
+++ b/src/main/java/com/kiocg/ChunkHot.java
@@ -0,0 +1,90 @@
+package com.kiocg;
+
+import java.util.Arrays;
+
+public class ChunkHot {
+    // 热度统计总区间数量
+    private static final int TIMES_LENGTH = 10;
+    // 当前统计区间下标
+    private int index = -1;
+
+    // 热度统计区间
+    private final long[] times = new long[TIMES_LENGTH];
+    // 存放临时的区间数值
+    // 用于修正正在统计的当前区间热度没有计入总值的问题
+    private long temp;
+    // 所有区间的热度总值
+    private long total;
+
+    // 用于每个具体统计的计算
+    private long nanos;
+    // 当前统计是否进行中
+    private volatile boolean started = false;
+
+    /**
+     * 更新区间下标
+     */
+    public void nextTick() {
+        this.index = ++this.index % TIMES_LENGTH;
+    }
+
+    /**
+     * 开始统计一个新区间
+     */
+    public void start() {
+        started = true;
+        temp = times[this.index];
+        times[this.index] = 0L;
+    }
+
+    public boolean isStarted(){
+        return this.started;
+    }
+
+    /**
+     * 结束当前区间的统计
+     * 将统计值更新入热度总值
+     */
+    public void stop() {
+        started = false;
+        total -= temp;
+        total += times[this.index];
+    }
+
+    /**
+     * 开始一个具体统计
+     */
+    public void startTicking() {
+        if (!started) return;
+        nanos = System.nanoTime();
+    }
+
+    /**
+     * 结束一个具体统计
+     * 将统计值计入当前热度区间
+     */
+    public void stopTickingAndCount() {
+        if (!started) return;
+        // 定义一个具体统计的最大值为 1,000,000
+        // 有时候某个具体统计的计算值会在某1刻飙升，可能是由于保存数据到磁盘？
+        times[this.index] += Math.min(System.nanoTime() - nanos, 1000000L);
+    }
+
+    /**
+     * 清空统计 (当区块卸载时)
+     */
+    public void clear() {
+        started = false;
+        Arrays.fill(times, 0L);
+        temp = 0L;
+        total = 0L;
+        nanos = 0L;
+    }
+
+    /**
+     * @return 获取区块热度平均值
+     */
+    public long getAverage() {
+        return total / ((long) TIMES_LENGTH * 20L);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 13524f93a6fba8eee2fa7c4d999e224b9d4f89e4..e787a4ae0b3c73a7244bf494ad0f7e33b3fdb4c2 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1710,6 +1710,30 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Folia end - region threading
 
+        // KioCG start - ChunkHot
+        final ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<net.minecraft.world.level.chunk.LevelChunk> chunks = new ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<>();
+        if (region != null){
+            for (net.minecraft.server.level.ServerChunkCache.ChunkAndHolder chunkAndHolder : region.world.getCurrentWorldData().getTickingChunks()){
+                final net.minecraft.world.level.chunk.LevelChunk chunk = chunkAndHolder.chunk();
+
+                if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(region.world, chunk.locX, chunk.locZ)){
+                    continue;
+                }
+
+                chunks.add(chunk);
+            }
+        }
+        if (region != null && io.papermc.paper.threadedregions.RegionizedServer.getCurrentTick() % 20 == 0){
+            final Iterator<net.minecraft.world.level.chunk.LevelChunk> chunkIterator = chunks.unsafeIterator();
+            while (chunkIterator.hasNext()){
+                final net.minecraft.world.level.chunk.LevelChunk targetChunk = chunkIterator.next();
+
+                targetChunk.getChunkHot().nextTick();
+                targetChunk.getChunkHot().start();
+            }
+        }
+        //KioCG end
+
         // Folia - region threading
         if (region == null) this.tickRateManager.tick(); // Folia - region threading
         this.tickChildren(shouldKeepTicking, region); // Folia - region threading
@@ -1719,6 +1743,20 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
 
         // Folia - region threading
+        // KioCG start - ChunkHot
+        if (region != null && io.papermc.paper.threadedregions.RegionizedServer.getCurrentTick() % 20 == 0){
+            final Iterator<net.minecraft.world.level.chunk.LevelChunk> chunkIterator = chunks.unsafeIterator();
+            while (chunkIterator.hasNext()){
+                final net.minecraft.world.level.chunk.LevelChunk targetChunk = chunkIterator.next();
+
+                if (!targetChunk.getChunkHot().isStarted()){
+                    continue;
+                }
+
+                targetChunk.getChunkHot().stop();
+            }
+        }
+        //KioCG end
         // Paper start - Incremental chunk and player saving
         int playerSaveInterval = io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.rate;
         if (playerSaveInterval < 0) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index fec0013b5a85e8ccf2680659db8770db2402ede1..e8a885cbccc7e8b493a282d94065bef78ba22515 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1358,6 +1358,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         final int timerId = isActive ? entity.getType().tickTimerId : entity.getType().inactiveTickTimerId;
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler();
         profiler.startTimer(timerId);
+            LevelChunk levelChunk = entity.shouldTickHot() ? this.getChunkIfLoaded(entity.moonrise$getSectionX(),entity.moonrise$getSectionZ()) : null; // KioCG
+            if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
         // Folia end - timer
         try {
         // Paper end - timings
@@ -1384,6 +1386,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         } else { entity.inactiveTick(); } // Paper - EAR 2
         this.getProfiler().pop();
         } finally { profiler.stopTimer(timerId); } // Paper - timings // Folia - timer
+        } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1410,6 +1413,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 final int timerId = isActive ? passenger.getType().tickTimerId : passenger.getType().inactiveTickTimerId;
                 final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler();
                 profiler.startTimer(timerId);
+                LevelChunk levelChunk = !(passenger instanceof Player) ? this.getChunkIfLoaded(passenger.blockPosition()) : null; // KioCG
+                if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
                 // Folia end - timer
                 try {
                 // Paper end
@@ -1451,6 +1456,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 }
 
             } finally { profiler.stopTimer(timerId); }// Paper - EAR2 timings // Folia - timer
+                } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             }
         } else {
             passenger.stopRiding();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index e4a68f43c1a48fe8193623c646eb40bc5f664c76..fc1bda7589032405c42cd6dcb7e1b4545ada1af3 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -333,6 +333,25 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         return this.viewDistanceHolder;
     }
     // Paper end - rewrite chunk system
+    // KioCG start - ChunkHot
+    private volatile long nearbyChunkHot = 0;
+
+    public long getNearbyChunkHot() { return this.nearbyChunkHot; }
+
+    private long refreshNearbyChunkHot() {
+        long total = 0L;
+        int searchRadius = ((ServerLevel) this.level()).moonrise$getViewDistanceHolder().getViewDistances().tickViewDistance();
+        for (int i = this.moonrise$getSectionX() - searchRadius; i <= this.moonrise$getSectionX() + searchRadius; ++i) {
+            for (int j = this.moonrise$getSectionZ() - searchRadius; j <= this.moonrise$getSectionZ() + searchRadius; ++j) {
+                net.minecraft.world.level.chunk.LevelChunk targetChunk = this.level().getChunkIfLoaded(i, j);
+                if (targetChunk != null) {
+                    total += targetChunk.getChunkHot().getAverage();
+                }
+            }
+        }
+        return total;
+    }
+    // KioCG end
 
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
@@ -950,6 +969,11 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         this.trackEnteredOrExitedLavaOnVehicle();
         this.updatePlayerAttributes();
         this.advancements.flushDirty(this);
+        // KioCG start - ChunkHot
+        if (this.tickCount % 20 == 0){
+            this.nearbyChunkHot = this.refreshNearbyChunkHot();
+        }
+        // KioCG end
     }
 
     private void updatePlayerAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 1859477e96709368683fe5707327e92f56fbfc8e..4955c17e62b01073d1b866ac7e32e900e2caf517 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -449,4 +449,10 @@ public class AreaEffectCloud extends Entity implements TraceableEntity {
     public EntityDimensions getDimensions(Pose pose) {
         return EntityDimensions.scalable(this.getRadius() * 2.0F, 0.5F);
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e698afd1ca3ac92ccd3063e3e21a5f766d1b412e..3e4217ffa2130fd4793e9fa298b82c335de23efa 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -5800,4 +5800,5 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return ((net.minecraft.server.level.ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end - Expose entity id counter
+    public boolean shouldTickHot() { return this.tickCount > 20 * 10 && this.isAlive(); } // KioCG
 }
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 4f701788bd21b61cad251a3a88f9bc416fb99051..5ae54bea450c9e9511094764d8e19708d049ee8a 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -288,4 +288,10 @@ public class LightningBolt extends Entity {
     public Stream<Entity> getHitEntities() {
         return this.hitEntities.stream().filter(Entity::isAlive);
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index aecc668eb9177413a66df91b9e71bff8e11af4e0..cac7e70b60db0621b1fda62877157c8cedbf8d87 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1847,4 +1847,10 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
 
         return itemmonsteregg == null ? null : new ItemStack(itemmonsteregg);
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && (!this.removeWhenFarAway(0.0) || this.isPersistenceRequired() || this.requiresCustomPersistence());
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index bbfc94237bbd546361cc4a7bde773c810e8c5d49..d4bf8ee9b0bbfc7a6d5c4a258535cef8332abb19 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -166,4 +166,10 @@ public class TraderLlama extends Llama {
             super.start();
         }
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && !this.canDespawn();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 0af34e0f9c9696fbcb11b12fb27472ef17ad532a..0c7a45423af46118368318bf0f382c1c7460d535 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -326,4 +326,10 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
             return !pos.closerToCenterThan(this.trader.position(), proximityDistance);
         }
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index b3377ed06d703f54e01ba174e5a06dc928cdff96..13fc689fca71815d338482c6987679e0560d654a 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -2516,4 +2516,10 @@ public abstract class Player extends LivingEntity {
             return this.message;
         }
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 0e831070fe7a9ac58de4b25b74a53b38334c695a..6ca6b6574fb94932dae7dca60c388446edfe325b 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -403,4 +403,10 @@ public abstract class Projectile extends Entity implements TraceableEntity {
 
         return DoubleDoubleImmutablePair.of(d0, d1);
     }
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 4f58f33fba5690933c3d5357d2ea5cdab73427f1..a6f8fea13ae5ea179c38343ca55c871c43752d17 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -92,6 +92,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     private final Int2ObjectMap<GameEventListenerRegistry> gameEventListenerRegistrySections;
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
+    private final com.kiocg.ChunkHot chunkHot = new com.kiocg.ChunkHot(); public com.kiocg.ChunkHot getChunkHot() { return this.chunkHot; } // KioCG
 
     public LevelChunk(Level world, ChunkPos pos) {
         this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null);
@@ -1048,6 +1049,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
                         ProfilerFiller gameprofilerfiller = LevelChunk.this.level.getProfiler();
 
                         gameprofilerfiller.push(this::getType);
+                        LevelChunk.this.chunkHot.startTicking(); // KioCG
                         profiler.startTimer(timerId); try { // Folia - profiler
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
@@ -1075,6 +1077,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
                         LevelChunk.this.removeBlockEntity(this.getPos());
                         // Paper end - Prevent block entity and entity crashes
                         // Spigot start
+                        LevelChunk.this.chunkHot.stopTickingAndCount(); // KioCG
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index e679b40b9628b0eb7152978ef641f9c918c4c8b2..bf9ae765242bb61d3e279893b0355d122cb1e985 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -63,7 +63,10 @@ public interface NeighborUpdater {
                 }
             }
             // CraftBukkit end
+            net.minecraft.world.level.chunk.LevelChunk levelChunk = world.getChunkIfLoaded(pos); // KioCG
+            if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
             state.handleNeighborChanged(world, pos, sourceBlock, sourcePos, notify);
+            } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             // Spigot Start
         } catch (StackOverflowError ex) {
             world.lastPhysicsProblem = new BlockPos(pos);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 45e262308aebafa377a2353661acdd122933b99e..b3598c4ef4e3f74ece8ef2d6c831d9359621a140 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -5,20 +5,14 @@ import com.google.common.base.Predicates;
 import com.mojang.serialization.Codec;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Objects;
-import java.util.concurrent.locks.LockSupport;
-import java.util.function.BooleanSupplier;
 import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.registries.Registries;
-import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.thread.ProcessorMailbox;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Blocks;
@@ -30,8 +24,6 @@ import net.minecraft.world.level.chunk.PalettedContainer;
 import net.minecraft.world.level.chunk.PalettedContainerRO;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
-import net.minecraft.world.level.chunk.storage.EntityStorage;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.lighting.LevelLightEngine;
@@ -436,4 +428,5 @@ public class CraftChunk implements Chunk {
     static {
         Arrays.fill(FULL_LIGHT, (byte) 0xFF);
     }
+    // KioCG end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 12a2da086f249b3dbd61e5749b9856a2fce9ac7b..190feabe5a0c04df6bb79d167d4c738a27f33afe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3579,5 +3579,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundEntityEventPacket(((CraftEntity) target).getHandle(), effect.getData()));
     }
-    // Paper end - entity effect API
+    // Paper end - entity effect API// KioCG start - ChunkHot
+    @Override
+    public long getNearbyChunkHot() {
+        return this.getHandle().getNearbyChunkHot();
+    }
+    // KioCG end
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xuyin <1573880184@qq.com>
Date: Wed, 22 Jan 2025 15:16:59 +0800
Subject: [PATCH] Rewrote configuration system.


diff --git a/src/main/java/com/menthamc/mint/config/ConfigCategory.java b/src/main/java/com/menthamc/mint/config/ConfigCategory.java
index b77447ff13e627a5537003ed647c74cf33c31dd1..2e91061279e8efb96ef458d1213ff8b054001592 100644
--- a/src/main/java/com/menthamc/mint/config/ConfigCategory.java
+++ b/src/main/java/com/menthamc/mint/config/ConfigCategory.java
@@ -1,12 +1,6 @@
 package com.menthamc.mint.config;
 
 public enum ConfigCategory {
-    FIX("fix"),
-    MISC("misc");
-
-    final String name;
-
-    ConfigCategory(String name) {
-        this.name = name;
-    }
+    fix,
+    misc;
 }
diff --git a/src/main/java/com/menthamc/mint/config/ConfigInfo.java b/src/main/java/com/menthamc/mint/config/ConfigField.java
similarity index 73%
rename from src/main/java/com/menthamc/mint/config/ConfigInfo.java
rename to src/main/java/com/menthamc/mint/config/ConfigField.java
index e423932cfa17fc74e4911cf094cc70c8735ffe73..0afa60f05343763e185a2b6af8f27aa2267afc08 100644
--- a/src/main/java/com/menthamc/mint/config/ConfigInfo.java
+++ b/src/main/java/com/menthamc/mint/config/ConfigField.java
@@ -7,8 +7,6 @@ import java.lang.annotation.Target;
 
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface ConfigInfo {
-    String name() default "";
-
-    String commit() default "";
+public @interface ConfigField {
+    String[] comment() default {};
 }
diff --git a/src/main/java/com/menthamc/mint/config/ConfigManager.java b/src/main/java/com/menthamc/mint/config/ConfigManager.java
deleted file mode 100644
index 817c20e3e6bcb47727df71107285f8f3a1a56ef7..0000000000000000000000000000000000000000
--- a/src/main/java/com/menthamc/mint/config/ConfigManager.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.menthamc.mint.config;
-
-import com.electronwill.nightconfig.core.file.CommentedFileConfig;
-import io.github.classgraph.ClassGraph;
-import io.github.classgraph.ClassInfo;
-import io.github.classgraph.ScanResult;
-import net.minecraft.CrashReport;
-import org.apache.commons.io.FileUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Modifier;
-import java.nio.charset.StandardCharsets;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-public class ConfigManager {
-    private final static Logger LOGGER = LoggerFactory.getLogger(ConfigManager.class);
-    private static ConfigManager instance = null;
-    private final File baseConfigFolder = new File("mint");
-    private final File baseConfigFile = new File(baseConfigFolder, "mint_global.toml");
-    protected static final Map<Class<?>, IConfigModule> configModules = new HashMap<>();
-    private final CommentedFileConfig configurationInstance;
-
-    public synchronized static ConfigManager getInstance() {
-        return instance;
-    }
-
-    public ConfigManager() {
-        instance = this;
-        if (!baseConfigFolder.exists()) {
-            if (!baseConfigFolder.mkdirs()) {
-                throw new RuntimeException("Cannot create mint folder.");
-            }
-        }
-
-        configurationInstance = CommentedFileConfig.ofConcurrent(baseConfigFile);
-    }
-
-    public void loadConfig() {
-        try {
-            configurationInstance.load();
-            loadClassInstance();
-            loaded();
-            configurationInstance.save();
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public void setup() {
-    }
-
-    private void loadClassInstance() {
-        getClassesByPackage("com.menthamc.mint.config.modules").forEach(it -> {
-            int modifiers = it.getModifiers();
-            if (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)) return;
-            if (it.isAnnotationPresent(ConfigSkipLoad.class)) return;
-            if (!it.isAnnotationPresent(Configuration.class)) return;
-            Configuration cfg = it.getDeclaredAnnotation(Configuration.class);
-
-            try {
-                Object instance = it.getDeclaredConstructor().newInstance();
-
-                Field[] fields = it.getDeclaredFields();
-                for (Field field : fields) {
-                    if (field.isAnnotationPresent(ConfigSkipLoad.class)) continue;
-                    if (!field.isAnnotationPresent(ConfigInfo.class)) continue;
-                    int fieldModifiers = field.getModifiers();
-                    if (!(Modifier.isPublic(fieldModifiers)) && Modifier.isFinal(fieldModifiers) && Modifier.isStatic(fieldModifiers)) continue;
-
-                    ConfigInfo ci = field.getDeclaredAnnotation(ConfigInfo.class);
-                    Object o = field.get(instance);
-
-                    String fullPath;
-                    if (ci.name().isBlank()) {
-                        fullPath = cfg.type().name + "." + cfg.name() + "." + field.getName();
-                    } else {
-                        fullPath = cfg.type().name + "." + cfg.name() + "." + ci.name();
-                    }
-
-                    if (!configurationInstance.contains(fullPath)) {
-                        if (o == null) throw new RuntimeException("Failed to load field " + field.getName() + " of class " + it.getDeclaringClass().getName());
-                        configurationInstance.add(fullPath, o);
-
-                        if (!ci.commit().isBlank()) {
-                            configurationInstance.setComment(fullPath, ci.commit());
-                        }
-                    } else {
-                        Object value = configurationInstance.get(fullPath);
-
-                        field.set(instance, value);
-                    }
-                }
-
-                if (!configModules.containsKey(it)) {
-                    if (instance instanceof IConfigModule) {
-                        configModules.put(it, (IConfigModule) instance);
-                    } else {
-                        LOGGER.error("Initial configManager exception.", new ClassCastException("This module does not implement IConfigModule"));
-                    }
-                }
-            } catch (InvocationTargetException | InstantiationException | IllegalAccessException |
-                     NoSuchMethodException e) {
-                throw new RuntimeException(e);
-            }
-        });
-    }
-
-    public void reloadConfig() {
-        configModules.clear();
-        configurationInstance.clear();
-
-        configurationInstance.load();
-        loadConfig();
-    }
-
-    private void loaded() {
-        for (IConfigModule value : configModules.values()) {
-            value.loaded(configurationInstance);
-        }
-    }
-
-    private Set<Class<?>> getClassesByPackage(String packageName) {
-        try(ScanResult result = new ClassGraph().acceptPackages(packageName).scan()) {
-            return result.getAllClasses().stream().map(ClassInfo::loadClass).collect(Collectors.toSet());
-        }
-    }
-}
diff --git a/src/main/java/com/menthamc/mint/config/Configuration.java b/src/main/java/com/menthamc/mint/config/Configuration.java
index cc11080828718e0caa25956132e0fb6922b12c81..e441ace6c0acdb984258c3b06332ede38f1f7965 100644
--- a/src/main/java/com/menthamc/mint/config/Configuration.java
+++ b/src/main/java/com/menthamc/mint/config/Configuration.java
@@ -5,10 +5,12 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-@Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
 public @interface Configuration {
     String name();
 
     ConfigCategory type();
+
+    String[] comment() default {};
 }
diff --git a/src/main/java/com/menthamc/mint/config/IConfigModule.java b/src/main/java/com/menthamc/mint/config/IConfigModule.java
index e8ea8a4bca63ddd52d261e8aef9756897ad96890..5b6ac7ce80db1614e3d25f9370ed945b8d6d38b5 100644
--- a/src/main/java/com/menthamc/mint/config/IConfigModule.java
+++ b/src/main/java/com/menthamc/mint/config/IConfigModule.java
@@ -1,12 +1,4 @@
 package com.menthamc.mint.config;
 
-import com.electronwill.nightconfig.core.file.CommentedFileConfig;
-
 public interface IConfigModule {
-    default void loaded(CommentedFileConfig config) {}
-
-    @SuppressWarnings("unchecked")
-    static <V extends IConfigModule> V get(Class<V> clazz) {
-        return (V) ConfigManager.configModules.get(clazz);
-    }
 }
diff --git a/src/main/java/com/menthamc/mint/config/MintConfig.java b/src/main/java/com/menthamc/mint/config/MintConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..4a298b5fe8143dbebd0c508743ec892a62db1acb
--- /dev/null
+++ b/src/main/java/com/menthamc/mint/config/MintConfig.java
@@ -0,0 +1,119 @@
+package com.menthamc.mint.config;
+
+import com.electronwill.nightconfig.core.file.CommentedFileConfig;
+import io.github.classgraph.ClassGraph;
+import io.github.classgraph.ClassInfo;
+import io.github.classgraph.ScanResult;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.File;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+public class MintConfig {
+    private static final Logger LOGGER = LoggerFactory.getLogger(MintConfig.class);
+    private static final File baseConfigFolder = new File("mint");
+    private static final File baseConfigFile = new File(baseConfigFolder, "mint_global.toml");
+    private static final CommentedFileConfig configuration;
+
+    static {
+        if (!baseConfigFolder.exists()) {
+            if (!baseConfigFolder.mkdirs()) {
+                throw new RuntimeException("Unable to create `mint` folder.");
+            }
+        }
+        configuration = CommentedFileConfig.builder(baseConfigFile)
+                .concurrent().charset(StandardCharsets.UTF_8).build();
+    }
+
+    public static void setup() {
+    }
+
+    public static void loadConfig() {
+        // Loaded this config file.
+        if (baseConfigFile.exists()) {
+            configuration.load();
+        }
+
+        Set<Class<?>> moduleClasses = getClassesByPackage();
+        for (Class<?> clazz : moduleClasses) {
+            loadConfigInstance(clazz);
+        }
+
+        configuration.save();
+    }
+
+    private static void loadConfigInstance(Class<?> moduleClass) {
+        try {
+            if (Arrays.stream(moduleClass.getInterfaces())
+                    .collect(Collectors.toSet()).contains(IConfigModule.class)
+            ) {
+                int clazzModifiers = moduleClass.getModifiers();
+                if (!moduleClass.isAnnotationPresent(Configuration.class) || moduleClass.isAnnotationPresent(ConfigSkipLoad.class))
+                    return;
+                if (!(Modifier.isPublic(clazzModifiers) && isPlainClass(moduleClass))) {
+                    LOGGER.error("`{}` must be public and plain class!", moduleClass.getName(), new RuntimeException());
+                    return;
+                }
+
+                Configuration cfg = moduleClass.getDeclaredAnnotation(Configuration.class);
+                for (Field field : moduleClass.getDeclaredFields()) {
+                    int fieldModifiers = field.getModifiers();
+                    if (!field.isAnnotationPresent(ConfigField.class) || field.isAnnotationPresent(ConfigSkipLoad.class))
+                        continue;
+                    if (!(Modifier.isStatic(fieldModifiers) && Modifier.isPublic(fieldModifiers))) {
+                        LOGGER.error("`{}` must be public and static!", field.getName(), new RuntimeException());
+                        continue;
+                    }
+
+                    ConfigField config = field.getDeclaredAnnotation(ConfigField.class);
+                    String fullPath = cfg.type().name() + "." + cfg.name() + "." + field.getName();
+
+                    if (!configuration.contains(fullPath)) {
+                        configuration.add(fullPath, field.get(null));
+
+                        setComment(config.comment(), fullPath);
+                    }
+
+                    field.set(null, configuration.get(fullPath));
+                }
+
+                setComment(cfg.comment(), cfg.type().name() + "." + cfg.name());
+            }
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static void reloadConfig() {
+        loadConfig();
+    }
+
+    private static void setComment(String[] comment, String fullPath) {
+        if (comment.length > 0) {
+            StringBuilder builder = new StringBuilder();
+            for (int i = 0; i < comment.length; i++) {
+                builder.append(" ").append(comment[i]);
+                if (i < comment.length - 1)
+                    builder.append("\n");
+            }
+
+            configuration.setComment(fullPath, builder.toString());
+        }
+    }
+
+    private static Set<Class<?>> getClassesByPackage() {
+        try(ScanResult result = new ClassGraph().acceptPackages("com.menthamc.mint.config.modules").scan()) {
+            return result.getAllClasses().stream().map(ClassInfo::loadClass).collect(Collectors.toSet());
+        }
+    }
+
+    private static boolean isPlainClass(Class<?> clazz) {
+        return !clazz.isAnnotation() && !clazz.isInterface() && !clazz.isEnum() && !Modifier.isAbstract(clazz.getModifiers());
+    }
+}
diff --git a/src/main/java/com/menthamc/mint/config/modules/fix/UnsafeTeleportationConfig.java b/src/main/java/com/menthamc/mint/config/modules/fix/UnsafeTeleportationConfig.java
index 9a1e4c5b27cbbce4cc495ad60a79f73477427b12..6fee15142ee604a094b71a743fe004063536e499 100644
--- a/src/main/java/com/menthamc/mint/config/modules/fix/UnsafeTeleportationConfig.java
+++ b/src/main/java/com/menthamc/mint/config/modules/fix/UnsafeTeleportationConfig.java
@@ -1,13 +1,15 @@
 package com.menthamc.mint.config.modules.fix;
 
 import com.menthamc.mint.config.ConfigCategory;
-import com.menthamc.mint.config.ConfigInfo;
+import com.menthamc.mint.config.ConfigField;
 import com.menthamc.mint.config.Configuration;
 import com.menthamc.mint.config.IConfigModule;
 
-@Configuration(name = "unsafe-teleportation", type = ConfigCategory.FIX)
+@Configuration(name = "unsafe-teleportation", type = ConfigCategory.fix)
 public class UnsafeTeleportationConfig implements IConfigModule {
-    @ConfigInfo(commit = "If you want to use sand duping,please turn on this.\n" +
-            "Warning: This would cause some unsafe issues, you could learn more on : https://github.com/PaperMC/Folia/issues/297")
-    public boolean enabled = false;
+    @ConfigField(comment = {
+            "If you want to use sand duping,please turn on this.",
+            "Warning: This would cause some unsafe issues, you could learn more on : https://github.com/PaperMC/Folia/issues/297"
+    })
+    public static boolean enabled = false;
 }
diff --git a/src/main/java/com/menthamc/mint/config/modules/fix/VoidTradingFixConfig.java b/src/main/java/com/menthamc/mint/config/modules/fix/VoidTradingFixConfig.java
index bb678030343da7734377a768253f18f75dc66865..e73755e3870c494b37232e80c3c44a3dc15dce93 100644
--- a/src/main/java/com/menthamc/mint/config/modules/fix/VoidTradingFixConfig.java
+++ b/src/main/java/com/menthamc/mint/config/modules/fix/VoidTradingFixConfig.java
@@ -1,12 +1,12 @@
 package com.menthamc.mint.config.modules.fix;
 
 import com.menthamc.mint.config.ConfigCategory;
-import com.menthamc.mint.config.ConfigInfo;
+import com.menthamc.mint.config.ConfigField;
 import com.menthamc.mint.config.Configuration;
 import com.menthamc.mint.config.IConfigModule;
 
-@Configuration(name = "void-trading-fix", type = ConfigCategory.FIX)
+@Configuration(name = "void-trading-fix", type = ConfigCategory.fix)
 public class VoidTradingFixConfig implements IConfigModule {
-    @ConfigInfo(name = "enabled")
+    @ConfigField
     public static boolean enabled = false;
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/menthamc/mint/config/modules/misc/ServerModNameConfig.java b/src/main/java/com/menthamc/mint/config/modules/misc/ServerModNameConfig.java
index ae7cf97d0932e93cf814647f4847bbc8eaf3a70e..40d274ced66349840a1cb391a5d2a8f5f49f7b17 100644
--- a/src/main/java/com/menthamc/mint/config/modules/misc/ServerModNameConfig.java
+++ b/src/main/java/com/menthamc/mint/config/modules/misc/ServerModNameConfig.java
@@ -1,12 +1,12 @@
 package com.menthamc.mint.config.modules.misc;
 
 import com.menthamc.mint.config.ConfigCategory;
-import com.menthamc.mint.config.ConfigInfo;
+import com.menthamc.mint.config.ConfigField;
 import com.menthamc.mint.config.Configuration;
 import com.menthamc.mint.config.IConfigModule;
 
-@Configuration(name = "server-name", type = ConfigCategory.MISC)
+@Configuration(name = "server-name", type = ConfigCategory.misc)
 public class ServerModNameConfig implements IConfigModule {
-    @ConfigInfo(commit = "This can change the server name.")
+    @ConfigField(comment = "This can change the server name.")
     public static String serverModName= "Mint";
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f41975cde4a017ec464f6364e0bf8d738e95e51c..19fea0491864e60f3ebbeed3318e638bbddc5060 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -3,9 +3,6 @@ package net.minecraft.server;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -106,7 +103,6 @@ import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.debugchart.RemoteDebugSampleType;
 import net.minecraft.util.debugchart.SampleLogger;
 import net.minecraft.util.debugchart.TpsDebugDimensions;
-import net.minecraft.util.profiling.EmptyProfileResults;
 import net.minecraft.util.profiling.ProfileResults;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.profiling.ResultField;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a51ff09326c1281bf3a6960beede439192f1db96..8ed28f10ed6f7413e774cee7af959720663735a3 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,21 +1,17 @@
 package net.minecraft.server.dedicated;
 
-import com.menthamc.mint.config.ConfigManager;
-import com.google.common.collect.Lists;
+import com.menthamc.mint.config.MintConfig;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
+
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.net.URI;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
@@ -67,8 +63,6 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
 import co.aikar.timings.MinecraftTimings; // Paper
-import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
-import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -96,8 +90,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     private DebugSampleSubscriptionTracker debugSampleSubscriptionTracker;
     public ServerLinks serverLinks;
 
-    private final ConfigManager configManager = new ConfigManager(); // Mint
-
     // CraftBukkit start - Signature changed
     public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super(options, worldLoader, thread, convertable_conversionsession, resourcepackrepository, worldstem, Proxy.NO_PROXY, datafixer, services, worldloadlistenerfactory);
@@ -229,8 +221,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
-        configManager.loadConfig(); // Mint
-        configManager.setup(); // Mint
+        MintConfig.loadConfig(); // Mint
+        MintConfig.setup(); // Mint
         this.server.spark.enableEarlyIfRequested(); // Paper - spark
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 9efb212218162b4320147bcc5f7d083c072fda6d..da9b698d943517a9bcd20b1ae84a7874ba840073 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -3,6 +3,7 @@ package net.minecraft.server.level;
 import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
+import com.menthamc.mint.config.modules.fix.VoidTradingFixConfig;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
@@ -14,7 +15,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.io.BufferedWriter;
 import java.io.IOException;
@@ -140,11 +140,9 @@ import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
 import net.minecraft.world.level.entity.EntityPersistentStorage;
-import net.minecraft.world.level.entity.EntityTickList;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.entity.LevelEntityGetter;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventDispatcher;
@@ -2816,7 +2814,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             // Spigot Start
             if (entity.getBukkitEntity() instanceof org.bukkit.inventory.InventoryHolder && (!(entity instanceof ServerPlayer) || entity.getRemovalReason() != Entity.RemovalReason.KILLED)) { // SPIGOT-6876: closeInventory clears death message
                 // Paper start - Fix merchant inventory not closing on entity removal
-                if (!com.menthamc.mint.config.modules.fix.VoidTradingFixConfig.enabled && entity.getBukkitEntity() instanceof org.bukkit.inventory.Merchant merchant && merchant.getTrader() != null) { // Mint
+                if (!VoidTradingFixConfig.enabled && entity.getBukkitEntity() instanceof org.bukkit.inventory.Merchant merchant && merchant.getTrader() != null) { // Mint
                     merchant.getTrader().closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNLOADED);
                 }
                 // Paper end - Fix merchant inventory not closing on entity removal
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index 6969b31173cd8499c7f203eda2616550e5539407..c3940456f1e0f7914bbd6ed01d8e5a1edf62e916 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.item;
 
-import com.menthamc.mint.config.IConfigModule;
 import com.menthamc.mint.config.modules.fix.UnsafeTeleportationConfig;
 import com.mojang.logging.LogUtils;
 import java.util.Iterator;
@@ -71,7 +70,7 @@ public class FallingBlockEntity extends Entity {
     public float fallDamagePerDistance;
     @Nullable
     public CompoundTag blockData;
-    public static boolean forceTickAfterTeleportToDuplicate =  IConfigModule.get(UnsafeTeleportationConfig.class).enabled; // Mint
+    public static boolean forceTickAfterTeleportToDuplicate =  UnsafeTeleportationConfig.enabled; // Mint
     protected static final EntityDataAccessor<BlockPos> DATA_START_POS = SynchedEntityData.defineId(FallingBlockEntity.class, EntityDataSerializers.BLOCK_POS);
     public boolean autoExpire = true; // Paper - Expand FallingBlock API
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 54fddeea91a4f177508902fb209064edcdd85d94..3e50e3971adc816e05a7d6f9a3999cb8077e0c34 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit;
 
-import com.menthamc.mint.config.ConfigManager;
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
@@ -9,6 +8,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
+import com.menthamc.mint.config.MintConfig;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -1173,7 +1173,7 @@ public final class CraftServer implements Server {
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper - Debugging
         }
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
-        ConfigManager.getInstance().reloadConfig(); // Mint
+        MintConfig.reloadConfig(); // Mint
         logger.info("Mint config is reloaded."); // Mint
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
